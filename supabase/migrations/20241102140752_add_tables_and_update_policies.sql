create type "public"."job_payment_types" as enum ('cash', 'credit', 'finance');

drop policy "Enable all actions for location managers or admins" on "public"."business_location_job_media";

drop policy "Enable all for closer or installer" on "public"."business_location_job_media";

drop policy "Enable insert for location employees" on "public"."business_location_job_messages";

drop policy "Enable select for location employees" on "public"."business_location_job_messages";

drop policy "Enable insert for location employees" on "public"."business_location_job_profiles";

drop policy "Enable select for closer and installer" on "public"."business_location_jobs";

drop policy "Enable all access for creators" on "public"."business_location_leads";

drop policy "Enable insert for location employees" on "public"."business_location_leads";

drop policy "Enable insert for authenticated users only" on "public"."business_location_profiles";

drop policy "Enable read access for all users" on "public"."business_location_profiles";

drop policy "Enable all access for business admins" on "public"."business_locations";

drop policy "Enable read access for location profiles" on "public"."business_locations";

drop policy "Enable all for authenticated users only" on "public"."business_profiles";

drop policy "Enable read action for all authenticated users" on "public"."business_profiles";

drop policy "Enable select for location employees" on "public"."businesses";

drop policy "Enable delete for users based on author_id" on "public"."business_location_job_messages";

drop policy "Enable all actions for global admins" on "public"."business_location_jobs";

drop policy "Enable all actions for location managers" on "public"."business_location_jobs";

drop policy "Enable insert for location employees" on "public"."business_location_jobs";

drop policy "Enable all actions for global admins" on "public"."business_location_profiles";

drop policy "Enable all actions for global admins" on "public"."business_locations";

drop policy "Enable all actions for business profile" on "public"."business_logs";

drop policy "Enable all actions for global admins" on "public"."business_profiles";

drop policy "Enable all actions for global admins" on "public"."profiles";

create table "public"."business_location_job_products" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "business_id" uuid not null,
    "location_id" bigint not null,
    "job_id" bigint not null,
    "product_id" bigint,
    "lead_price_addon" double precision default '0'::double precision,
    "number_of_units" double precision not null default '1'::double precision
);


alter table "public"."business_location_job_products" enable row level security;

create table "public"."business_products" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "measurement" text not null default 'sq ft'::text,
    "price_per_measurement" double precision not null,
    "image" text,
    "business_id" uuid
);


alter table "public"."business_products" enable row level security;

alter table "public"."business_location_jobs" add column "has_water_rebate" boolean not null default false;

alter table "public"."business_location_jobs" add column "hoa_approval_required" boolean not null default false;

alter table "public"."business_location_jobs" add column "hoa_contact_email" text;

alter table "public"."business_location_jobs" add column "hoa_contact_name" text;

alter table "public"."business_location_jobs" add column "hoa_contact_phone" text;

alter table "public"."business_location_jobs" add column "payment_type" job_payment_types not null default 'cash'::job_payment_types;

alter table "public"."business_location_jobs" add column "water_rebate_company" text;

CREATE UNIQUE INDEX business_location_job_products_pkey ON public.business_location_job_products USING btree (id);

CREATE UNIQUE INDEX business_products_pkey ON public.business_products USING btree (id);

alter table "public"."business_location_job_products" add constraint "business_location_job_products_pkey" PRIMARY KEY using index "business_location_job_products_pkey";

alter table "public"."business_products" add constraint "business_products_pkey" PRIMARY KEY using index "business_products_pkey";

alter table "public"."business_location_job_products" add constraint "business_location_job_products_business_id_fkey" FOREIGN KEY (business_id) REFERENCES businesses(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_job_products" validate constraint "business_location_job_products_business_id_fkey";

alter table "public"."business_location_job_products" add constraint "business_location_job_products_job_id_fkey" FOREIGN KEY (job_id) REFERENCES business_location_jobs(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_job_products" validate constraint "business_location_job_products_job_id_fkey";

alter table "public"."business_location_job_products" add constraint "business_location_job_products_location_id_fkey" FOREIGN KEY (location_id) REFERENCES business_locations(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_job_products" validate constraint "business_location_job_products_location_id_fkey";

alter table "public"."business_location_job_products" add constraint "business_location_job_products_product_id_fkey" FOREIGN KEY (product_id) REFERENCES business_products(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_job_products" validate constraint "business_location_job_products_product_id_fkey";

alter table "public"."business_products" add constraint "business_products_business_id_fkey" FOREIGN KEY (business_id) REFERENCES businesses(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_products" validate constraint "business_products_business_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.business_profile_has_role(bid uuid, r text)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
 return exists (
    select 1 from business_profiles
    where (select auth.uid()) = business_profiles.profile_id
    AND business_profiles.business_id = bid
    AND business_profiles.role = r::business_roles
    );
END;$function$
;

CREATE OR REPLACE FUNCTION public.has_business_profile(bid uuid)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
 return exists (
    select 1 from business_profiles
    where (select auth.uid()) = business_profiles.profile_id
    AND business_profiles.business_id = bid
    LIMIT 1
    );
END;$function$
;

CREATE OR REPLACE FUNCTION public.has_job_profile(jid bigint)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
 return exists (
    select 1 from business_location_job_profiles
    where (select auth.uid()) = business_location_job_profiles.profile_id
    AND business_location_job_profiles.job_id = jid
    );
END;$function$
;

CREATE OR REPLACE FUNCTION public.has_location_profile(lid bigint)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
 return exists (
    select 1 from business_location_profiles
    where (select auth.uid()) = business_location_profiles.profile_id
    AND business_location_profiles.location_id = lid
    );
END;$function$
;

CREATE OR REPLACE FUNCTION public.has_role_at_any_business_location(r text, bid uuid)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
 return exists (
    select 1 from business_location_profiles
    where (select auth.uid()) = business_location_profiles.profile_id
    AND business_location_profiles.role = r::location_profile_roles
    AND business_location_profiles.business_id = bid
    );
END;$function$
;

CREATE OR REPLACE FUNCTION public.location_profile_has_role(lid bigint, r text)
 RETURNS boolean
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
 return exists (
    select 1 from business_location_profiles
    where (select auth.uid()) = business_location_profiles.profile_id
    AND business_location_profiles.location_id = lid
    AND business_location_profiles.role = r::location_profile_roles
    );
END;$function$
;

grant delete on table "public"."business_location_job_products" to "anon";

grant insert on table "public"."business_location_job_products" to "anon";

grant references on table "public"."business_location_job_products" to "anon";

grant select on table "public"."business_location_job_products" to "anon";

grant trigger on table "public"."business_location_job_products" to "anon";

grant truncate on table "public"."business_location_job_products" to "anon";

grant update on table "public"."business_location_job_products" to "anon";

grant delete on table "public"."business_location_job_products" to "authenticated";

grant insert on table "public"."business_location_job_products" to "authenticated";

grant references on table "public"."business_location_job_products" to "authenticated";

grant select on table "public"."business_location_job_products" to "authenticated";

grant trigger on table "public"."business_location_job_products" to "authenticated";

grant truncate on table "public"."business_location_job_products" to "authenticated";

grant update on table "public"."business_location_job_products" to "authenticated";

grant delete on table "public"."business_location_job_products" to "service_role";

grant insert on table "public"."business_location_job_products" to "service_role";

grant references on table "public"."business_location_job_products" to "service_role";

grant select on table "public"."business_location_job_products" to "service_role";

grant trigger on table "public"."business_location_job_products" to "service_role";

grant truncate on table "public"."business_location_job_products" to "service_role";

grant update on table "public"."business_location_job_products" to "service_role";

grant delete on table "public"."business_products" to "anon";

grant insert on table "public"."business_products" to "anon";

grant references on table "public"."business_products" to "anon";

grant select on table "public"."business_products" to "anon";

grant trigger on table "public"."business_products" to "anon";

grant truncate on table "public"."business_products" to "anon";

grant update on table "public"."business_products" to "anon";

grant delete on table "public"."business_products" to "authenticated";

grant insert on table "public"."business_products" to "authenticated";

grant references on table "public"."business_products" to "authenticated";

grant select on table "public"."business_products" to "authenticated";

grant trigger on table "public"."business_products" to "authenticated";

grant truncate on table "public"."business_products" to "authenticated";

grant update on table "public"."business_products" to "authenticated";

grant delete on table "public"."business_products" to "service_role";

grant insert on table "public"."business_products" to "service_role";

grant references on table "public"."business_products" to "service_role";

grant select on table "public"."business_products" to "service_role";

grant trigger on table "public"."business_products" to "service_role";

grant truncate on table "public"."business_products" to "service_role";

grant update on table "public"."business_products" to "service_role";

create policy "Enable all actions for business admin"
on "public"."business_location_job_media"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'admin'::text));


create policy "Enable all actions for business managers"
on "public"."business_location_job_media"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'manager'::text));


create policy "Enable all actions for global admins"
on "public"."business_location_job_media"
as permissive
for all
to authenticated
using (is_global_admin());


create policy "Enable all actions for job profiles"
on "public"."business_location_job_media"
as permissive
for all
to authenticated
using (has_job_profile(job_id));


create policy "Enable all actions for location admin"
on "public"."business_location_job_media"
as permissive
for all
to authenticated
using (location_profile_has_role(location_id, 'admin'::text));


create policy "Enable all actions for location manager"
on "public"."business_location_job_media"
as permissive
for all
to authenticated
using (location_profile_has_role(location_id, 'manager'::text));


create policy "Enable all actions for business admins"
on "public"."business_location_job_messages"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'admin'::text));


create policy "Enable all actions for business managers"
on "public"."business_location_job_messages"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'manager'::text));


create policy "Enable all actions for global admins"
on "public"."business_location_job_messages"
as permissive
for all
to authenticated
using (is_global_admin());


create policy "Enable all actions for location admin"
on "public"."business_location_job_messages"
as permissive
for all
to authenticated
using (location_profile_has_role(location_id, 'admin'::text));


create policy "Enable all actions for location managers"
on "public"."business_location_job_messages"
as permissive
for all
to authenticated
using (location_profile_has_role(location_id, 'manager'::text));


create policy "Enable all for job profiles"
on "public"."business_location_job_messages"
as permissive
for all
to authenticated
using (has_job_profile(job_id));


create policy "Enable all actions for business admins"
on "public"."business_location_job_products"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'admin'::text));


create policy "Enable all actions for business managers"
on "public"."business_location_job_products"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'manager'::text));


create policy "Enable all actions for global admins"
on "public"."business_location_job_products"
as permissive
for all
to authenticated
using (is_global_admin());


create policy "Enable all actions for job profiles"
on "public"."business_location_job_products"
as permissive
for all
to authenticated
using (has_job_profile(job_id));


create policy "Enable all actions for location admin"
on "public"."business_location_job_products"
as permissive
for all
to authenticated
using (location_profile_has_role(location_id, 'admin'::text));


create policy "Enable all actions for location managers"
on "public"."business_location_job_products"
as permissive
for all
to authenticated
using (location_profile_has_role(location_id, 'manager'::text));


create policy "Enable insert for location profiles"
on "public"."business_location_job_products"
as permissive
for insert
to authenticated
with check (has_location_profile(location_id));


create policy "Enable all actions for business admin"
on "public"."business_location_job_profiles"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'admin'::text));


create policy "Enable all actions for business manager"
on "public"."business_location_job_profiles"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'manager'::text));


create policy "Enable all actions for global admin"
on "public"."business_location_job_profiles"
as permissive
for all
to authenticated
using (is_global_admin());


create policy "Enable all actions for location admin"
on "public"."business_location_job_profiles"
as permissive
for all
to authenticated
using (location_profile_has_role(location_id, 'admin'::text));


create policy "Enable all actions for location manager"
on "public"."business_location_job_profiles"
as permissive
for all
to authenticated
using (location_profile_has_role(location_id, 'manager'::text));


create policy "Enable insert if business location profile"
on "public"."business_location_job_profiles"
as permissive
for all
to authenticated
using (has_location_profile(location_id));


create policy "Enable update if has job profile"
on "public"."business_location_job_profiles"
as permissive
for update
to authenticated
using (has_job_profile(job_id));


create policy "Enable all actions for business admins"
on "public"."business_location_jobs"
as permissive
for all
to public
using (business_profile_has_role(business_id, 'admin'::text));


create policy "Enable all actions for business manager"
on "public"."business_location_jobs"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'manager'::text));


create policy "Enable all actions for location admin"
on "public"."business_location_jobs"
as permissive
for all
to authenticated
using (location_profile_has_role(business_location_id, 'admin'::text));


create policy "Enable select if job profile"
on "public"."business_location_jobs"
as permissive
for select
to authenticated
using (has_job_profile(id));


create policy "Enable update if job profile"
on "public"."business_location_jobs"
as permissive
for update
to authenticated
using (has_job_profile(id));


create policy "Enable all actions for business admin"
on "public"."business_location_profiles"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'admin'::text));


create policy "Enable all actions for business managers"
on "public"."business_location_profiles"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'manager'::text));


create policy "Enable all actions for location admin"
on "public"."business_location_profiles"
as permissive
for all
to authenticated
using (location_profile_has_role(location_id, 'admin'::text));


create policy "Enable all actions for location manager"
on "public"."business_location_profiles"
as permissive
for all
to authenticated
using (location_profile_has_role(location_id, 'admin'::text));


create policy "Enable select if location profile"
on "public"."business_location_profiles"
as permissive
for select
to authenticated
using (has_location_profile(location_id));


create policy "Enable all actions for business admin"
on "public"."business_locations"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'admin'::text));


create policy "Enable all actions for business managers"
on "public"."business_locations"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'manager'::text));


create policy "Enable select for location profiles"
on "public"."business_locations"
as permissive
for select
to authenticated
using (has_location_profile(id));


create policy "Enable update if location admin"
on "public"."business_locations"
as permissive
for update
to authenticated
using (location_profile_has_role(id, 'admin'::text));


create policy "Enable update if location manager"
on "public"."business_locations"
as permissive
for update
to authenticated
using (location_profile_has_role(id, 'manager'::text));


create policy "Enable all actions for business admins"
on "public"."business_products"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'admin'::text));


create policy "Enable all actions for business managers"
on "public"."business_products"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'manager'::text));


create policy "Enable all actions for global admins"
on "public"."business_products"
as permissive
for all
to authenticated
using (is_global_admin());


create policy "Enable select for business profiles"
on "public"."business_products"
as permissive
for select
to authenticated
using (has_business_profile(business_id));


create policy "Enable all actions for business admins"
on "public"."business_profiles"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'admin'::text));


create policy "Enable all actions for business managers"
on "public"."business_profiles"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'manager'::text));


create policy "Enable all actions for location admin"
on "public"."business_profiles"
as permissive
for all
to authenticated
using (has_role_at_any_business_location('admin'::text, business_id));


create policy "Enable all actions for location manager"
on "public"."business_profiles"
as permissive
for all
to authenticated
using (has_role_at_any_business_location('manager'::text, business_id));


create policy "Enable select if business profile"
on "public"."business_profiles"
as permissive
for select
to authenticated
using (has_business_profile(business_id));


create policy "Enable all actions for business admin"
on "public"."businesses"
as permissive
for all
to authenticated
using (business_profile_has_role(id, 'admin'::text));


create policy "Enable select for business profiles"
on "public"."businesses"
as permissive
for select
to authenticated
using (has_business_profile(id));


create policy "Enable insert for authenticated users only"
on "public"."profiles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable delete for users based on author_id"
on "public"."business_location_job_messages"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = author_id));


create policy "Enable all actions for global admins"
on "public"."business_location_jobs"
as permissive
for all
to authenticated
using (is_global_admin());


create policy "Enable all actions for location managers"
on "public"."business_location_jobs"
as permissive
for all
to authenticated
using (location_profile_has_role(business_location_id, 'manager'::text));


create policy "Enable insert for location employees"
on "public"."business_location_jobs"
as permissive
for insert
to authenticated
with check (has_location_profile(business_location_id));


create policy "Enable all actions for global admins"
on "public"."business_location_profiles"
as permissive
for all
to authenticated
using (is_global_admin());


create policy "Enable all actions for global admins"
on "public"."business_locations"
as permissive
for all
to authenticated
using (is_global_admin());


create policy "Enable all actions for business profile"
on "public"."business_logs"
as permissive
for all
to authenticated
using (has_business_profile(business_id));


create policy "Enable all actions for global admins"
on "public"."business_profiles"
as permissive
for all
to authenticated
using (is_global_admin());


create policy "Enable all actions for global admins"
on "public"."profiles"
as permissive
for all
to authenticated
using (is_global_admin());




create type "public"."location_profile_roles" as enum ('admin', 'manager', 'base');

create table "public"."global_admins" (
    "created_at" timestamp with time zone not null default now(),
    "profile_id" uuid not null
);


alter table "public"."global_admins" enable row level security;

create table "public"."location_profiles" (
    "created_at" timestamp with time zone not null default now(),
    "location_id" bigint not null,
    "profile_id" uuid not null,
    "role" location_profile_roles not null default 'base'::location_profile_roles
);


alter table "public"."location_profiles" enable row level security;

create table "public"."locations" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "address" text,
    "address2" text,
    "city" text,
    "state" text,
    "postal_code" text
);


alter table "public"."locations" enable row level security;

alter table "public"."profiles" add column "created_at" timestamp with time zone not null default now();

CREATE UNIQUE INDEX global_admins_pkey ON public.global_admins USING btree (profile_id);

CREATE UNIQUE INDEX location_profiles_pkey ON public.location_profiles USING btree (location_id, profile_id);

CREATE UNIQUE INDEX locations_name_key ON public.locations USING btree (name);

CREATE UNIQUE INDEX locations_pkey ON public.locations USING btree (id);

alter table "public"."global_admins" add constraint "global_admins_pkey" PRIMARY KEY using index "global_admins_pkey";

alter table "public"."location_profiles" add constraint "location_profiles_pkey" PRIMARY KEY using index "location_profiles_pkey";

alter table "public"."locations" add constraint "locations_pkey" PRIMARY KEY using index "locations_pkey";

alter table "public"."global_admins" add constraint "global_admins_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."global_admins" validate constraint "global_admins_profile_id_fkey";

alter table "public"."location_profiles" add constraint "location_profiles_location_id_fkey" FOREIGN KEY (location_id) REFERENCES locations(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."location_profiles" validate constraint "location_profiles_location_id_fkey";

alter table "public"."location_profiles" add constraint "location_profiles_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."location_profiles" validate constraint "location_profiles_profile_id_fkey";

alter table "public"."locations" add constraint "locations_name_key" UNIQUE using index "locations_name_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_user_id_by_email(email text)
 RETURNS TABLE(id uuid)
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  RETURN QUERY SELECT au.id FROM auth.users au WHERE au.email = $1 LIMIT 1;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.is_global_admin()
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$BEGIN
 return exists (
    select 1 from global_admins
    where (select auth.uid()) = global_admins.profile_id
    );
END;$function$
;

CREATE OR REPLACE FUNCTION public.is_location_profile(location_id integer)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$BEGIN
 return exists (
    select 1 from location_profiles
    where (select auth.uid()) = location_profiles.profile_id
    AND location_profiles.location_id = location_id
    );
END;$function$
;

grant delete on table "public"."global_admins" to "anon";

grant insert on table "public"."global_admins" to "anon";

grant references on table "public"."global_admins" to "anon";

grant select on table "public"."global_admins" to "anon";

grant trigger on table "public"."global_admins" to "anon";

grant truncate on table "public"."global_admins" to "anon";

grant update on table "public"."global_admins" to "anon";

grant delete on table "public"."global_admins" to "authenticated";

grant insert on table "public"."global_admins" to "authenticated";

grant references on table "public"."global_admins" to "authenticated";

grant select on table "public"."global_admins" to "authenticated";

grant trigger on table "public"."global_admins" to "authenticated";

grant truncate on table "public"."global_admins" to "authenticated";

grant update on table "public"."global_admins" to "authenticated";

grant delete on table "public"."global_admins" to "service_role";

grant insert on table "public"."global_admins" to "service_role";

grant references on table "public"."global_admins" to "service_role";

grant select on table "public"."global_admins" to "service_role";

grant trigger on table "public"."global_admins" to "service_role";

grant truncate on table "public"."global_admins" to "service_role";

grant update on table "public"."global_admins" to "service_role";

grant delete on table "public"."location_profiles" to "anon";

grant insert on table "public"."location_profiles" to "anon";

grant references on table "public"."location_profiles" to "anon";

grant select on table "public"."location_profiles" to "anon";

grant trigger on table "public"."location_profiles" to "anon";

grant truncate on table "public"."location_profiles" to "anon";

grant update on table "public"."location_profiles" to "anon";

grant delete on table "public"."location_profiles" to "authenticated";

grant insert on table "public"."location_profiles" to "authenticated";

grant references on table "public"."location_profiles" to "authenticated";

grant select on table "public"."location_profiles" to "authenticated";

grant trigger on table "public"."location_profiles" to "authenticated";

grant truncate on table "public"."location_profiles" to "authenticated";

grant update on table "public"."location_profiles" to "authenticated";

grant delete on table "public"."location_profiles" to "service_role";

grant insert on table "public"."location_profiles" to "service_role";

grant references on table "public"."location_profiles" to "service_role";

grant select on table "public"."location_profiles" to "service_role";

grant trigger on table "public"."location_profiles" to "service_role";

grant truncate on table "public"."location_profiles" to "service_role";

grant update on table "public"."location_profiles" to "service_role";

grant delete on table "public"."locations" to "anon";

grant insert on table "public"."locations" to "anon";

grant references on table "public"."locations" to "anon";

grant select on table "public"."locations" to "anon";

grant trigger on table "public"."locations" to "anon";

grant truncate on table "public"."locations" to "anon";

grant update on table "public"."locations" to "anon";

grant delete on table "public"."locations" to "authenticated";

grant insert on table "public"."locations" to "authenticated";

grant references on table "public"."locations" to "authenticated";

grant select on table "public"."locations" to "authenticated";

grant trigger on table "public"."locations" to "authenticated";

grant truncate on table "public"."locations" to "authenticated";

grant update on table "public"."locations" to "authenticated";

grant delete on table "public"."locations" to "service_role";

grant insert on table "public"."locations" to "service_role";

grant references on table "public"."locations" to "service_role";

grant select on table "public"."locations" to "service_role";

grant trigger on table "public"."locations" to "service_role";

grant truncate on table "public"."locations" to "service_role";

grant update on table "public"."locations" to "service_role";

create policy "Enable read only for authenticated"
on "public"."global_admins"
as permissive
for select
to authenticated
using (true);


create policy "Enable all actions for global admins"
on "public"."location_profiles"
as permissive
for all
to public
using (is_global_admin());


create policy "Enable all actions for global admins"
on "public"."locations"
as permissive
for all
to public
using (is_global_admin());


create policy "Enable all actions for global admins"
on "public"."profiles"
as permissive
for all
to public
using (is_global_admin());




create table "public"."business_location_profile_availability" (
    "created_at" timestamp with time zone not null default now(),
    "business_id" uuid not null,
    "location_id" bigint not null,
    "profile_id" uuid not null,
    "day_of_week" text not null,
    "id" bigint generated by default as identity not null,
    "end_time" time with time zone not null,
    "start_time" time with time zone not null
);


alter table "public"."business_location_profile_availability" enable row level security;

CREATE UNIQUE INDEX business_location_profile_availability_id_key ON public.business_location_profile_availability USING btree (id);

CREATE UNIQUE INDEX business_location_profile_availability_pkey ON public.business_location_profile_availability USING btree (id);

alter table "public"."business_location_profile_availability" add constraint "business_location_profile_availability_pkey" PRIMARY KEY using index "business_location_profile_availability_pkey";

alter table "public"."business_location_profile_availability" add constraint "business_location_profile_availability_business_id_fkey" FOREIGN KEY (business_id) REFERENCES businesses(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_profile_availability" validate constraint "business_location_profile_availability_business_id_fkey";

alter table "public"."business_location_profile_availability" add constraint "business_location_profile_availability_id_key" UNIQUE using index "business_location_profile_availability_id_key";

alter table "public"."business_location_profile_availability" add constraint "business_location_profile_availability_location_id_fkey" FOREIGN KEY (location_id) REFERENCES business_locations(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_profile_availability" validate constraint "business_location_profile_availability_location_id_fkey";

alter table "public"."business_location_profile_availability" add constraint "business_location_profile_availability_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_profile_availability" validate constraint "business_location_profile_availability_profile_id_fkey";

grant delete on table "public"."business_location_profile_availability" to "anon";

grant insert on table "public"."business_location_profile_availability" to "anon";

grant references on table "public"."business_location_profile_availability" to "anon";

grant select on table "public"."business_location_profile_availability" to "anon";

grant trigger on table "public"."business_location_profile_availability" to "anon";

grant truncate on table "public"."business_location_profile_availability" to "anon";

grant update on table "public"."business_location_profile_availability" to "anon";

grant delete on table "public"."business_location_profile_availability" to "authenticated";

grant insert on table "public"."business_location_profile_availability" to "authenticated";

grant references on table "public"."business_location_profile_availability" to "authenticated";

grant select on table "public"."business_location_profile_availability" to "authenticated";

grant trigger on table "public"."business_location_profile_availability" to "authenticated";

grant truncate on table "public"."business_location_profile_availability" to "authenticated";

grant update on table "public"."business_location_profile_availability" to "authenticated";

grant delete on table "public"."business_location_profile_availability" to "service_role";

grant insert on table "public"."business_location_profile_availability" to "service_role";

grant references on table "public"."business_location_profile_availability" to "service_role";

grant select on table "public"."business_location_profile_availability" to "service_role";

grant trigger on table "public"."business_location_profile_availability" to "service_role";

grant truncate on table "public"."business_location_profile_availability" to "service_role";

grant update on table "public"."business_location_profile_availability" to "service_role";

create policy "Enable delete action for creator"
on "public"."business_location_profile_availability"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = profile_id));


create policy "Enable insert action for admin on all profiles"
on "public"."business_location_profile_availability"
as permissive
for insert
to authenticated
with check (location_profile_has_role(location_id, 'admin'::text));


create policy "Enable insert action for manager on all profiles"
on "public"."business_location_profile_availability"
as permissive
for insert
to authenticated
with check (location_profile_has_role(location_id, 'manager'::text));


create policy "Enable insert action for own profile"
on "public"."business_location_profile_availability"
as permissive
for insert
to authenticated
with check ((has_location_profile(location_id) AND (profile_id = profile_id)));


create policy "Enable select action for profiles in channel"
on "public"."business_location_profile_availability"
as permissive
for select
to authenticated
using (has_location_profile(location_id));


create policy "Enable update action for admin"
on "public"."business_location_profile_availability"
as permissive
for update
to authenticated
with check (location_profile_has_role(location_id, 'admin'::text));


create policy "Enable update action for manager"
on "public"."business_location_profile_availability"
as permissive
for update
to authenticated
with check (location_profile_has_role(location_id, 'manager'::text));


create policy "Enable update action for profile"
on "public"."business_location_profile_availability"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = profile_id));




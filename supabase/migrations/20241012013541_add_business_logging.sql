revoke delete on table "public"."business_location_job_logs" from "anon";

revoke insert on table "public"."business_location_job_logs" from "anon";

revoke references on table "public"."business_location_job_logs" from "anon";

revoke select on table "public"."business_location_job_logs" from "anon";

revoke trigger on table "public"."business_location_job_logs" from "anon";

revoke truncate on table "public"."business_location_job_logs" from "anon";

revoke update on table "public"."business_location_job_logs" from "anon";

revoke delete on table "public"."business_location_job_logs" from "authenticated";

revoke insert on table "public"."business_location_job_logs" from "authenticated";

revoke references on table "public"."business_location_job_logs" from "authenticated";

revoke select on table "public"."business_location_job_logs" from "authenticated";

revoke trigger on table "public"."business_location_job_logs" from "authenticated";

revoke truncate on table "public"."business_location_job_logs" from "authenticated";

revoke update on table "public"."business_location_job_logs" from "authenticated";

revoke delete on table "public"."business_location_job_logs" from "service_role";

revoke insert on table "public"."business_location_job_logs" from "service_role";

revoke references on table "public"."business_location_job_logs" from "service_role";

revoke select on table "public"."business_location_job_logs" from "service_role";

revoke trigger on table "public"."business_location_job_logs" from "service_role";

revoke truncate on table "public"."business_location_job_logs" from "service_role";

revoke update on table "public"."business_location_job_logs" from "service_role";

alter table "public"."business_location_job_logs" drop constraint "business_location_job_logs_pkey";

drop index if exists "public"."business_location_job_logs_pkey";

drop table "public"."business_location_job_logs";

create table "public"."business_logs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "message" text not null,
    "record_id" text not null,
    "record_table_name" text not null,
    "business_id" uuid not null,
    "profile_id" uuid not null,
    "snapshot" jsonb
);


alter table "public"."business_logs" enable row level security;

CREATE UNIQUE INDEX business_location_job_logs_pkey ON public.business_logs USING btree (id);

alter table "public"."business_logs" add constraint "business_location_job_logs_pkey" PRIMARY KEY using index "business_location_job_logs_pkey";

alter table "public"."business_logs" add constraint "business_logs_business_id_fkey" FOREIGN KEY (business_id) REFERENCES businesses(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_logs" validate constraint "business_logs_business_id_fkey";

alter table "public"."business_logs" add constraint "business_logs_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."business_logs" validate constraint "business_logs_profile_id_fkey";

grant delete on table "public"."business_logs" to "anon";

grant insert on table "public"."business_logs" to "anon";

grant references on table "public"."business_logs" to "anon";

grant select on table "public"."business_logs" to "anon";

grant trigger on table "public"."business_logs" to "anon";

grant truncate on table "public"."business_logs" to "anon";

grant update on table "public"."business_logs" to "anon";

grant delete on table "public"."business_logs" to "authenticated";

grant insert on table "public"."business_logs" to "authenticated";

grant references on table "public"."business_logs" to "authenticated";

grant select on table "public"."business_logs" to "authenticated";

grant trigger on table "public"."business_logs" to "authenticated";

grant truncate on table "public"."business_logs" to "authenticated";

grant update on table "public"."business_logs" to "authenticated";

grant delete on table "public"."business_logs" to "service_role";

grant insert on table "public"."business_logs" to "service_role";

grant references on table "public"."business_logs" to "service_role";

grant select on table "public"."business_logs" to "service_role";

grant trigger on table "public"."business_logs" to "service_role";

grant truncate on table "public"."business_logs" to "service_role";

grant update on table "public"."business_logs" to "service_role";

create policy "Enable all actions for business profile"
on "public"."business_logs"
as permissive
for all
to authenticated
using (is_business_profile((business_id)::text));




create table "public"."business_location_job_media" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "business_id" uuid not null,
    "location_id" bigint not null,
    "job_id" bigint not null,
    "name" text not null,
    "path" text not null
);


alter table "public"."business_location_job_media" enable row level security;

CREATE UNIQUE INDEX business_location_job_media_pkey ON public.business_location_job_media USING btree (id);

alter table "public"."business_location_job_media" add constraint "business_location_job_media_pkey" PRIMARY KEY using index "business_location_job_media_pkey";

alter table "public"."business_location_job_media" add constraint "business_location_job_media_business_id_fkey" FOREIGN KEY (business_id) REFERENCES businesses(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_job_media" validate constraint "business_location_job_media_business_id_fkey";

alter table "public"."business_location_job_media" add constraint "business_location_job_media_job_id_fkey" FOREIGN KEY (job_id) REFERENCES business_location_jobs(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_job_media" validate constraint "business_location_job_media_job_id_fkey";

alter table "public"."business_location_job_media" add constraint "business_location_job_media_location_id_fkey" FOREIGN KEY (location_id) REFERENCES business_locations(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_job_media" validate constraint "business_location_job_media_location_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.is_business_profile(biz_id text)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$BEGIN
 return exists (
    select 1 from business_profiles
    where (select auth.uid()) = business_profiles.profile_id
    AND business_profiles.business_id::text = biz_id
    );
END;$function$
;

CREATE OR REPLACE FUNCTION public.is_job_employee(jobid integer)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$BEGIN
 return exists (
    select 1 from business_location_jobs
    where 
    business_location_jobs.id = jobid
    AND (
        business_location_jobs.closer_id = (select auth.uid())
        OR 
        business_location_jobs.installer_id = (select auth.uid())
    )
     
    );
END;$function$
;

CREATE OR REPLACE FUNCTION public.is_location_manager_or_admin(locationid integer)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$BEGIN
 return   (( SELECT auth.uid() AS uid) IN ( SELECT business_location_profiles.profile_id
   FROM business_location_profiles
  WHERE ((business_location_profiles.location_id = locationid) AND (business_location_profiles.role = ANY (ARRAY['manager'::location_profile_roles, 'admin'::location_profile_roles])))));
END;$function$
;

grant delete on table "public"."business_location_job_media" to "anon";

grant insert on table "public"."business_location_job_media" to "anon";

grant references on table "public"."business_location_job_media" to "anon";

grant select on table "public"."business_location_job_media" to "anon";

grant trigger on table "public"."business_location_job_media" to "anon";

grant truncate on table "public"."business_location_job_media" to "anon";

grant update on table "public"."business_location_job_media" to "anon";

grant delete on table "public"."business_location_job_media" to "authenticated";

grant insert on table "public"."business_location_job_media" to "authenticated";

grant references on table "public"."business_location_job_media" to "authenticated";

grant select on table "public"."business_location_job_media" to "authenticated";

grant trigger on table "public"."business_location_job_media" to "authenticated";

grant truncate on table "public"."business_location_job_media" to "authenticated";

grant update on table "public"."business_location_job_media" to "authenticated";

grant delete on table "public"."business_location_job_media" to "service_role";

grant insert on table "public"."business_location_job_media" to "service_role";

grant references on table "public"."business_location_job_media" to "service_role";

grant select on table "public"."business_location_job_media" to "service_role";

grant trigger on table "public"."business_location_job_media" to "service_role";

grant truncate on table "public"."business_location_job_media" to "service_role";

grant update on table "public"."business_location_job_media" to "service_role";

create policy "Enable all actions for location managers or admins"
on "public"."business_location_job_media"
as permissive
for all
to authenticated
using (is_location_manager_or_admin((location_id)::integer));


create policy "Enable all for closer or installer"
on "public"."business_location_job_media"
as permissive
for all
to authenticated
using (is_job_employee((job_id)::integer));




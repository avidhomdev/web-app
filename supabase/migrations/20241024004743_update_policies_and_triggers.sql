create type "public"."job_roles" as enum ('setter', 'installer', 'closer');

create table "public"."business_location_job_profiles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "business_id" uuid not null,
    "location_id" bigint not null,
    "job_id" bigint not null,
    "profile_id" uuid not null,
    "role" job_roles not null default 'setter'::job_roles
);


alter table "public"."business_location_job_profiles" enable row level security;

CREATE UNIQUE INDEX business_location_job_profiles_pkey ON public.business_location_job_profiles USING btree (id);

alter table "public"."business_location_job_profiles" add constraint "business_location_job_profiles_pkey" PRIMARY KEY using index "business_location_job_profiles_pkey";

alter table "public"."business_location_job_profiles" add constraint "business_location_job_profiles_business_id_fkey" FOREIGN KEY (business_id) REFERENCES businesses(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_job_profiles" validate constraint "business_location_job_profiles_business_id_fkey";

alter table "public"."business_location_job_profiles" add constraint "business_location_job_profiles_job_id_fkey" FOREIGN KEY (job_id) REFERENCES business_location_jobs(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_job_profiles" validate constraint "business_location_job_profiles_job_id_fkey";

alter table "public"."business_location_job_profiles" add constraint "business_location_job_profiles_location_id_fkey" FOREIGN KEY (location_id) REFERENCES business_locations(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_job_profiles" validate constraint "business_location_job_profiles_location_id_fkey";

alter table "public"."business_location_job_profiles" add constraint "business_location_job_profiles_profile_id_fkey" FOREIGN KEY (profile_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_location_job_profiles" validate constraint "business_location_job_profiles_profile_id_fkey";

grant delete on table "public"."business_location_job_profiles" to "anon";

grant insert on table "public"."business_location_job_profiles" to "anon";

grant references on table "public"."business_location_job_profiles" to "anon";

grant select on table "public"."business_location_job_profiles" to "anon";

grant trigger on table "public"."business_location_job_profiles" to "anon";

grant truncate on table "public"."business_location_job_profiles" to "anon";

grant update on table "public"."business_location_job_profiles" to "anon";

grant delete on table "public"."business_location_job_profiles" to "authenticated";

grant insert on table "public"."business_location_job_profiles" to "authenticated";

grant references on table "public"."business_location_job_profiles" to "authenticated";

grant select on table "public"."business_location_job_profiles" to "authenticated";

grant trigger on table "public"."business_location_job_profiles" to "authenticated";

grant truncate on table "public"."business_location_job_profiles" to "authenticated";

grant update on table "public"."business_location_job_profiles" to "authenticated";

grant delete on table "public"."business_location_job_profiles" to "service_role";

grant insert on table "public"."business_location_job_profiles" to "service_role";

grant references on table "public"."business_location_job_profiles" to "service_role";

grant select on table "public"."business_location_job_profiles" to "service_role";

grant trigger on table "public"."business_location_job_profiles" to "service_role";

grant truncate on table "public"."business_location_job_profiles" to "service_role";

grant update on table "public"."business_location_job_profiles" to "service_role";

create policy "Enable insert for location employees"
on "public"."business_location_job_profiles"
as permissive
for all
to public
using ((( SELECT auth.uid() AS uid) IN ( SELECT business_location_profiles.profile_id
   FROM business_location_profiles
  WHERE (business_location_profiles.location_id = business_location_job_profiles.location_id))));


create policy "Enable insert for authenticated users only"
on "public"."business_location_profiles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable all for authenticated users only"
on "public"."business_profiles"
as permissive
for all
to authenticated
using (true);

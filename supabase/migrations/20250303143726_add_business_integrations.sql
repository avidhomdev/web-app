create type "public"."row_status" as enum ('inactive', 'active');

create table "public"."business_integrations" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "business_id" uuid not null,
    "type" text not null default 'oauth'::text,
    "resource" text not null,
    "token" text,
    "authorized_on_date" date,
    "status" row_status not null default 'active'::row_status
);


alter table "public"."business_integrations" enable row level security;

CREATE UNIQUE INDEX business_integrations_pkey ON public.business_integrations USING btree (id);

alter table "public"."business_integrations" add constraint "business_integrations_pkey" PRIMARY KEY using index "business_integrations_pkey";

alter table "public"."business_integrations" add constraint "business_integrations_business_id_fkey" FOREIGN KEY (business_id) REFERENCES businesses(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."business_integrations" validate constraint "business_integrations_business_id_fkey";

grant delete on table "public"."business_integrations" to "anon";

grant insert on table "public"."business_integrations" to "anon";

grant references on table "public"."business_integrations" to "anon";

grant select on table "public"."business_integrations" to "anon";

grant trigger on table "public"."business_integrations" to "anon";

grant truncate on table "public"."business_integrations" to "anon";

grant update on table "public"."business_integrations" to "anon";

grant delete on table "public"."business_integrations" to "authenticated";

grant insert on table "public"."business_integrations" to "authenticated";

grant references on table "public"."business_integrations" to "authenticated";

grant select on table "public"."business_integrations" to "authenticated";

grant trigger on table "public"."business_integrations" to "authenticated";

grant truncate on table "public"."business_integrations" to "authenticated";

grant update on table "public"."business_integrations" to "authenticated";

grant delete on table "public"."business_integrations" to "service_role";

grant insert on table "public"."business_integrations" to "service_role";

grant references on table "public"."business_integrations" to "service_role";

grant select on table "public"."business_integrations" to "service_role";

grant trigger on table "public"."business_integrations" to "service_role";

grant truncate on table "public"."business_integrations" to "service_role";

grant update on table "public"."business_integrations" to "service_role";

create policy "Enable all actions for business admin"
on "public"."business_integrations"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'admin'::text));


create policy "Enable all actions for business managers"
on "public"."business_integrations"
as permissive
for all
to authenticated
using (business_profile_has_role(business_id, 'manager'::text));


create policy "Enable all actions for global admin"
on "public"."business_integrations"
as permissive
for all
to authenticated
using (is_global_admin());


create policy "Enable select for business profiles"
on "public"."business_integrations"
as permissive
for select
to authenticated
using (has_business_profile(business_id));



